// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DdsCommand.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include <DdsTopics/DdsCommand/DdsCommand.h>
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

DdsCommand::DdsCommand()
{
    // m_id_source com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1341870
    m_id_source = 0;
    // m_id_target com.eprosima.idl.parser.typecode.PrimitiveTypeCode@153f17c
    m_id_target = 0;
    // m_cmd_time com.eprosima.idl.parser.typecode.PrimitiveTypeCode@17d0008
    m_cmd_time = 0;
    // m_cmd_code com.eprosima.idl.parser.typecode.PrimitiveTypeCode@11053e1
    m_cmd_code = 0;
    // m_cmd_parameter com.eprosima.idl.parser.typecode.ArrayTypeCode@9838eb
    memset(&m_cmd_parameter, 0, (256) * 1);

}

DdsCommand::~DdsCommand()
{





}

DdsCommand::DdsCommand(
        const DdsCommand& x)
{
    m_id_source = x.m_id_source;
    m_id_target = x.m_id_target;
    m_cmd_time = x.m_cmd_time;
    m_cmd_code = x.m_cmd_code;
    m_cmd_parameter = x.m_cmd_parameter;
}

DdsCommand::DdsCommand(
        DdsCommand&& x)
{
    m_id_source = x.m_id_source;
    m_id_target = x.m_id_target;
    m_cmd_time = x.m_cmd_time;
    m_cmd_code = x.m_cmd_code;
    m_cmd_parameter = std::move(x.m_cmd_parameter);
}

DdsCommand& DdsCommand::operator =(
        const DdsCommand& x)
{

    m_id_source = x.m_id_source;
    m_id_target = x.m_id_target;
    m_cmd_time = x.m_cmd_time;
    m_cmd_code = x.m_cmd_code;
    m_cmd_parameter = x.m_cmd_parameter;

    return *this;
}

DdsCommand& DdsCommand::operator =(
        DdsCommand&& x)
{

    m_id_source = x.m_id_source;
    m_id_target = x.m_id_target;
    m_cmd_time = x.m_cmd_time;
    m_cmd_code = x.m_cmd_code;
    m_cmd_parameter = std::move(x.m_cmd_parameter);

    return *this;
}

bool DdsCommand::operator ==(
        const DdsCommand& x) const
{

    return (m_id_source == x.m_id_source && m_id_target == x.m_id_target && m_cmd_time == x.m_cmd_time && m_cmd_code == x.m_cmd_code && m_cmd_parameter == x.m_cmd_parameter);
}

bool DdsCommand::operator !=(
        const DdsCommand& x) const
{
    return !(*this == x);
}

size_t DdsCommand::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((256) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t DdsCommand::getCdrSerializedSize(
        const DdsCommand& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    if ((256) > 0)
    {
        current_alignment += ((256) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }


    return current_alignment - initial_alignment;
}

void DdsCommand::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_id_source;
    scdr << m_id_target;
    scdr << m_cmd_time;
    scdr << m_cmd_code;
    scdr << m_cmd_parameter;


}

void DdsCommand::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_id_source;
    dcdr >> m_id_target;
    dcdr >> m_cmd_time;
    dcdr >> m_cmd_code;
    dcdr >> m_cmd_parameter;

}

/*!
 * @brief This function sets a value in member id_source
 * @param _id_source New value for member id_source
 */
void DdsCommand::id_source(
        uint32_t _id_source)
{
    m_id_source = _id_source;
}

/*!
 * @brief This function returns the value of member id_source
 * @return Value of member id_source
 */
uint32_t DdsCommand::id_source() const
{
    return m_id_source;
}

/*!
 * @brief This function returns a reference to member id_source
 * @return Reference to member id_source
 */
uint32_t& DdsCommand::id_source()
{
    return m_id_source;
}

/*!
 * @brief This function sets a value in member id_target
 * @param _id_target New value for member id_target
 */
void DdsCommand::id_target(
        uint32_t _id_target)
{
    m_id_target = _id_target;
}

/*!
 * @brief This function returns the value of member id_target
 * @return Value of member id_target
 */
uint32_t DdsCommand::id_target() const
{
    return m_id_target;
}

/*!
 * @brief This function returns a reference to member id_target
 * @return Reference to member id_target
 */
uint32_t& DdsCommand::id_target()
{
    return m_id_target;
}

/*!
 * @brief This function sets a value in member cmd_time
 * @param _cmd_time New value for member cmd_time
 */
void DdsCommand::cmd_time(
        int64_t _cmd_time)
{
    m_cmd_time = _cmd_time;
}

/*!
 * @brief This function returns the value of member cmd_time
 * @return Value of member cmd_time
 */
int64_t DdsCommand::cmd_time() const
{
    return m_cmd_time;
}

/*!
 * @brief This function returns a reference to member cmd_time
 * @return Reference to member cmd_time
 */
int64_t& DdsCommand::cmd_time()
{
    return m_cmd_time;
}

/*!
 * @brief This function sets a value in member cmd_code
 * @param _cmd_code New value for member cmd_code
 */
void DdsCommand::cmd_code(
        uint32_t _cmd_code)
{
    m_cmd_code = _cmd_code;
}

/*!
 * @brief This function returns the value of member cmd_code
 * @return Value of member cmd_code
 */
uint32_t DdsCommand::cmd_code() const
{
    return m_cmd_code;
}

/*!
 * @brief This function returns a reference to member cmd_code
 * @return Reference to member cmd_code
 */
uint32_t& DdsCommand::cmd_code()
{
    return m_cmd_code;
}

/*!
 * @brief This function copies the value in member cmd_parameter
 * @param _cmd_parameter New value to be copied in member cmd_parameter
 */
void DdsCommand::cmd_parameter(
        const std::array<char, 256>& _cmd_parameter)
{
    m_cmd_parameter = _cmd_parameter;
}

/*!
 * @brief This function moves the value in member cmd_parameter
 * @param _cmd_parameter New value to be moved in member cmd_parameter
 */
void DdsCommand::cmd_parameter(
        std::array<char, 256>&& _cmd_parameter)
{
    m_cmd_parameter = std::move(_cmd_parameter);
}

/*!
 * @brief This function returns a constant reference to member cmd_parameter
 * @return Constant reference to member cmd_parameter
 */
const std::array<char, 256>& DdsCommand::cmd_parameter() const
{
    return m_cmd_parameter;
}

/*!
 * @brief This function returns a reference to member cmd_parameter
 * @return Reference to member cmd_parameter
 */
std::array<char, 256>& DdsCommand::cmd_parameter()
{
    return m_cmd_parameter;
}

size_t DdsCommand::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;








    return current_align;
}

bool DdsCommand::isKeyDefined()
{
    return false;
}

void DdsCommand::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
         
}
