// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DdsConfig.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include <DdsTopics/DdsConfig/DdsConfig.h>
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

DdsConfig::DdsConfig()
{
    // m_config_time com.eprosima.idl.parser.typecode.PrimitiveTypeCode@8080bb
    m_config_time = 0;
    // m_id_source com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1c24521
    m_id_source = 0;
    // m_id_target com.eprosima.idl.parser.typecode.PrimitiveTypeCode@bdf5e5
    m_id_target = 0;
    // m_conf_subject com.eprosima.idl.parser.typecode.SequenceTypeCode@1ec318


}

DdsConfig::~DdsConfig()
{




}

DdsConfig::DdsConfig(
        const DdsConfig& x)
{
    m_config_time = x.m_config_time;
    m_id_source = x.m_id_source;
    m_id_target = x.m_id_target;
    m_conf_subject = x.m_conf_subject;
}

DdsConfig::DdsConfig(
        DdsConfig&& x)
{
    m_config_time = x.m_config_time;
    m_id_source = x.m_id_source;
    m_id_target = x.m_id_target;
    m_conf_subject = std::move(x.m_conf_subject);
}

DdsConfig& DdsConfig::operator =(
        const DdsConfig& x)
{

    m_config_time = x.m_config_time;
    m_id_source = x.m_id_source;
    m_id_target = x.m_id_target;
    m_conf_subject = x.m_conf_subject;

    return *this;
}

DdsConfig& DdsConfig::operator =(
        DdsConfig&& x)
{

    m_config_time = x.m_config_time;
    m_id_source = x.m_id_source;
    m_id_target = x.m_id_target;
    m_conf_subject = std::move(x.m_conf_subject);

    return *this;
}

bool DdsConfig::operator ==(
        const DdsConfig& x) const
{

    return (m_config_time == x.m_config_time && m_id_source == x.m_id_source && m_id_target == x.m_id_target && m_conf_subject == x.m_conf_subject);
}

bool DdsConfig::operator !=(
        const DdsConfig& x) const
{
    return !(*this == x);
}

size_t DdsConfig::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (atech::common::SizeTopics::GetMaxSizeDdsConfig() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);




    return current_alignment - initial_alignment;
}

size_t DdsConfig::getCdrSerializedSize(
        const DdsConfig& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.conf_subject().size() > 0)
    {
        current_alignment += (data.conf_subject().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }




    return current_alignment - initial_alignment;
}

void DdsConfig::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_config_time;
    scdr << m_id_source;
    scdr << m_id_target;
    scdr << m_conf_subject;

}

void DdsConfig::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_config_time;
    dcdr >> m_id_source;
    dcdr >> m_id_target;
    dcdr >> m_conf_subject;
}

/*!
 * @brief This function sets a value in member config_time
 * @param _config_time New value for member config_time
 */
void DdsConfig::config_time(
        int64_t _config_time)
{
    m_config_time = _config_time;
}

/*!
 * @brief This function returns the value of member config_time
 * @return Value of member config_time
 */
int64_t DdsConfig::config_time() const
{
    return m_config_time;
}

/*!
 * @brief This function returns a reference to member config_time
 * @return Reference to member config_time
 */
int64_t& DdsConfig::config_time()
{
    return m_config_time;
}

/*!
 * @brief This function sets a value in member id_source
 * @param _id_source New value for member id_source
 */
void DdsConfig::id_source(
        uint32_t _id_source)
{
    m_id_source = _id_source;
}

/*!
 * @brief This function returns the value of member id_source
 * @return Value of member id_source
 */
uint32_t DdsConfig::id_source() const
{
    return m_id_source;
}

/*!
 * @brief This function returns a reference to member id_source
 * @return Reference to member id_source
 */
uint32_t& DdsConfig::id_source()
{
    return m_id_source;
}

/*!
 * @brief This function sets a value in member id_target
 * @param _id_target New value for member id_target
 */
void DdsConfig::id_target(
        uint32_t _id_target)
{
    m_id_target = _id_target;
}

/*!
 * @brief This function returns the value of member id_target
 * @return Value of member id_target
 */
uint32_t DdsConfig::id_target() const
{
    return m_id_target;
}

/*!
 * @brief This function returns a reference to member id_target
 * @return Reference to member id_target
 */
uint32_t& DdsConfig::id_target()
{
    return m_id_target;
}

/*!
 * @brief This function copies the value in member conf_subject
 * @param _conf_subject New value to be copied in member conf_subject
 */
void DdsConfig::conf_subject(
        const std::vector<char>& _conf_subject)
{
    m_conf_subject = _conf_subject;
}

/*!
 * @brief This function moves the value in member conf_subject
 * @param _conf_subject New value to be moved in member conf_subject
 */
void DdsConfig::conf_subject(
        std::vector<char>&& _conf_subject)
{
    m_conf_subject = std::move(_conf_subject);
}

/*!
 * @brief This function returns a constant reference to member conf_subject
 * @return Constant reference to member conf_subject
 */
const std::vector<char>& DdsConfig::conf_subject() const
{
    return m_conf_subject;
}

/*!
 * @brief This function returns a reference to member conf_subject
 * @return Reference to member conf_subject
 */
std::vector<char>& DdsConfig::conf_subject()
{
    return m_conf_subject;
}

size_t DdsConfig::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;







    return current_align;
}

bool DdsConfig::isKeyDefined()
{
    return false;
}

void DdsConfig::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
        
}
